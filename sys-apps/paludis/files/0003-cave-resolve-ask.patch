From 63c0cf76586b58634d8b3c5cfea10c693e67aed2 Mon Sep 17 00:00:00 2001
From: Marc-Antoine Perennou <Marc-Antoine@Perennou.com>
Date: Sat, 7 Aug 2010 11:00:13 +0200
Subject: [PATCH 3/3] cave resolve ask

---
 src/clients/cave/cmd_execute_resolution.cc |   46 ++++++++++++++++++++++-----
 src/clients/cave/cmd_resolve.cc            |    6 ++--
 src/clients/cave/resolve_cmdline.cc        |    1 +
 src/clients/cave/resolve_cmdline.hh        |    1 +
 src/clients/cave/resolve_common.cc         |    2 +
 zsh-completion/_cave                       |    1 +
 6 files changed, 45 insertions(+), 12 deletions(-)

diff --git a/src/clients/cave/cmd_execute_resolution.cc b/src/clients/cave/cmd_execute_resolution.cc
index d5d4996..64aea07 100644
--- a/src/clients/cave/cmd_execute_resolution.cc
+++ b/src/clients/cave/cmd_execute_resolution.cc
@@ -103,6 +103,7 @@ namespace
     {
         args::ArgsGroup g_general_options;
         args::SwitchArg a_pretend;
+        args::SwitchArg a_ask;
         args::SwitchArg a_set;
         args::StringSetArg a_world_specs;
         args::StringSetArg a_removed_if_dependent_names;
@@ -114,6 +115,7 @@ namespace
         ExecuteResolutionCommandLine() :
             g_general_options(main_options_section(), "General Options", "General options."),
             a_pretend(&g_general_options, "pretend", '\0', "Only carry out the pretend action", false),
+            a_ask(&g_general_options, "ask", '\0', "Ask before executing", false),
             a_set(&g_general_options, "set", '\0', "Our target is a set rather than package specs", false),
             a_world_specs(&g_general_options, "world-specs", '\0', "Use the specified spec or set name for updating world"),
             a_removed_if_dependent_names(&g_general_options, "removed-if-dependent-names", '\0',
@@ -291,6 +293,26 @@ namespace
         return 0 == retcode;
     }
 
+    bool do_ask()
+    {
+        Context context("When asking to execute :");
+        std::string answer;
+        cout << std::endl;
+        cout << "Do you really want to do this ? [Y/n] ... ";
+        while (true)
+        {
+            getline(std::cin, answer);
+            for (unsigned i(0) ; i < answer.length() ; ++i)
+                answer[i] = tolower(answer[i]);
+            if (answer == "no" || answer == "n")
+                return false;
+            else if (answer == "yes" || answer == "ye" || answer == "y" || answer == "")
+                return true;
+            cout << endl;
+            cout << "Unknown answer : " + answer + " [Y/n] ... ";
+        }
+    }
+
     std::string maybe_replacing(
             const std::shared_ptr<Environment> & env,
             const std::shared_ptr<const Sequence<PackageDepSpec> > & id_specs,
@@ -1548,7 +1570,8 @@ namespace
             const std::shared_ptr<Environment> & env,
             const std::shared_ptr<JobLists> & lists,
             const ExecuteResolutionCommandLine & cmdline,
-            const int n_fetch_jobs)
+            const int n_fetch_jobs,
+            bool * pretend)
     {
         for (JobList<ExecuteJob>::ConstIterator c(lists->execute_job_list()->begin()),
                 c_end(lists->execute_job_list()->end()) ;
@@ -1559,7 +1582,11 @@ namespace
         int retcode(0);
 
         retcode |= execute_pretends(env, lists, cmdline);
-        if (0 != retcode || cmdline.a_pretend.specified())
+
+        if ((! cmdline.a_pretend.specified()) && cmdline.a_ask.specified() && lists->execute_job_list()->length() != 0 && (! do_ask()))
+               *pretend = true;
+
+        if (0 != retcode || *pretend)
             return retcode;
 
         retcode |= execute_executions(env, lists, cmdline, n_fetch_jobs);
@@ -1718,36 +1745,37 @@ namespace
                     make_null_shared_ptr()).max_exit_status())
             throw ActionAbortedError("Aborted by hook");
 
+        bool pretend = cmdline.a_pretend.specified();
         try
         {
-            retcode = execute_resolution_main(env, lists, cmdline, n_fetch_jobs);
+            retcode = execute_resolution_main(env, lists, cmdline, n_fetch_jobs, &pretend);
         }
         catch (...)
         {
-            if ((! cmdline.a_pretend.specified()) || (0 == retcode))
+            if ((! pretend) || (0 == retcode))
                 write_resume_file(env, lists, cmdline, true);
 
-            if (! cmdline.a_pretend.specified())
+            if (! pretend)
                 display_summary(env, lists, 0 != retcode);
 
             if (0 != env->perform_hook(Hook("install_task_execute_post")
                         ("TARGETS", join(cmdline.begin_parameters(), cmdline.end_parameters(), " "))
-                        ("PRETEND", stringify(cmdline.a_pretend.specified()))
+                        ("PRETEND", stringify(pretend))
                         ("SUCCESS", stringify(false)),
                         make_null_shared_ptr()).max_exit_status())
                 throw ActionAbortedError("Aborted by hook");
             throw;
         }
 
-        if ((! cmdline.a_pretend.specified()) || (0 == retcode))
+        if ((! pretend) || (0 == retcode))
             write_resume_file(env, lists, cmdline, true);
 
-        if (! cmdline.a_pretend.specified())
+        if (! pretend)
             display_summary(env, lists, 0 != retcode);
 
         if (0 != env->perform_hook(Hook("install_task_execute_post")
                     ("TARGETS", join(cmdline.begin_parameters(), cmdline.end_parameters(), " "))
-                    ("PRETEND", stringify(cmdline.a_pretend.specified()))
+                    ("PRETEND", stringify(pretend))
                     ("SUCCESS", stringify(true)),
                     make_null_shared_ptr()).max_exit_status())
             throw ActionAbortedError("Aborted by hook");
diff --git a/src/clients/cave/cmd_resolve.cc b/src/clients/cave/cmd_resolve.cc
index 7845acb..af3f01a 100644
--- a/src/clients/cave/cmd_resolve.cc
+++ b/src/clients/cave/cmd_resolve.cc
@@ -49,9 +49,9 @@ namespace
             graph_jobs_options(this),
             program_options(this)
         {
-            add_usage_line("[ -x|--execute ] [ -z|--lazy or -c|--complete or -e|--everything ] spec ...");
-            add_usage_line("[ -x|--execute ] [ -z|--lazy or -c|--complete or -e|--everything ] set");
-            add_usage_line("[ -x|--execute ] !spec ...");
+            add_usage_line("[ -x|--execute ] [ -?|--ask ] [ -z|--lazy or -c|--complete or -e|--everything ] spec ...");
+            add_usage_line("[ -x|--execute ] [ -?|--ask ] [ -z|--lazy or -c|--complete or -e|--everything ] set");
+            add_usage_line("[ -x|--execute ] [ -?|--ask ] !spec ...");
         }
 
         std::string app_name() const
diff --git a/src/clients/cave/resolve_cmdline.cc b/src/clients/cave/resolve_cmdline.cc
index 89ecb01..ec0a370 100644
--- a/src/clients/cave/resolve_cmdline.cc
+++ b/src/clients/cave/resolve_cmdline.cc
@@ -46,6 +46,7 @@ ResolveCommandLineResolutionOptions::ResolveCommandLineResolutionOptions(args::A
     ArgsSection(h, "Resolution Options"),
     g_execution_options(this, "Execution Options", "Control execution."),
     a_execute(&g_execution_options, "execute", 'x', "Execute the suggested actions", true),
+    a_ask(&g_execution_options, "ask", '?', "Ask before executing", true),
 
     g_convenience_options(this, "Convenience Options", "Broad behaviour options. These options are simply "
             "a convenient way of selecting common groups of other options; see individual option descriptions "
diff --git a/src/clients/cave/resolve_cmdline.hh b/src/clients/cave/resolve_cmdline.hh
index a25b447..e7302b3 100644
--- a/src/clients/cave/resolve_cmdline.hh
+++ b/src/clients/cave/resolve_cmdline.hh
@@ -36,6 +36,7 @@ namespace paludis
 
             args::ArgsGroup g_execution_options;
             args::SwitchArg a_execute;
+            args::SwitchArg a_ask;
 
             args::ArgsGroup g_convenience_options;
             args::SwitchArg a_lazy;
diff --git a/src/clients/cave/resolve_common.cc b/src/clients/cave/resolve_common.cc
index 210ab43..492ca69 100644
--- a/src/clients/cave/resolve_common.cc
+++ b/src/clients/cave/resolve_common.cc
@@ -395,6 +395,8 @@ namespace
 
         if (pretend_only || ! resolution_options.a_execute.specified())
             args->push_back("--pretend");
+        else if (resolution_options.a_ask.specified())
+            args->push_back("--ask");
 
         for (Sequence<std::string>::ConstIterator p(world_specs->begin()), p_end(world_specs->end()) ;
                 p != p_end ; ++p)
diff --git a/zsh-completion/_cave b/zsh-completion/_cave
index 879140c..12f7fd3 100644
--- a/zsh-completion/_cave
+++ b/zsh-completion/_cave
@@ -570,6 +570,7 @@ _cave_cmd_report()
 _cave_resolve_arguments=(
     '(--help -h)'{--help,-h}'[Display help messsage]' \
     '(--execute -x --no-execute)'{--execute,-x,--no-execute}'[Execute the suggested actions]' \
+    '(--ask -? --no-ask)'{--ask,-?,--no-ask}'[Ask before executing]' \
     '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--lazy,-z,--no-lazy}'[Do as little work as possible]' \
     '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--complete,-c,--no-complete}'[Do all optional work]' \
     '(--lazy -z --complete -c --everything -e --no-lazy --no-complete --no-everything)'{--everything,-e,--no-everything}'[Do all optional work, and also reinstall]' \
-- 
1.7.4.rc1.5.ge17aa.dirty

